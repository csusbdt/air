<project default="-usage"> 

  <!-- Ant properties can not be overridden; the
       first mechanism to set a given property wins. -->

  <!-- Give build.properties the first opportunity to set properties. -->
  <property file="build.properties" />

  <!-- Give environmental variables the second chance to set properties. -->
  <property environment="env" />
  <property name="air-sdk" value="${env.AIR_SDK}" /> 

  <!-- Assign default values to properties that have not yet been set. -->
  <property name="air-sdk"         value="AIRSDK_Compiler" /> 
  <property name="config.message"  value="Message not set." /> 

  <!-- Set internally defined properties. -->
  <property name="adl"         value="${air-sdk}/bin/adl"         /> 
  <property name="adt"         value="${air-sdk}/bin/adt"         /> 
  <property name="mxmlc"       value="${air-sdk}/bin/mxmlc"       /> 
  <property name="aasdoc"       value="${air-sdk}/bin/aasdoc"       /> 
  <!--property name="swcdepends"  value="${air-sdk}/bin/swcdepends"  /--> 

  <!--taskdef resource="flexTasks.tasks" classpath="${air-sdk}/ant/lib/flexTasks.jar" /--> 

  <!-- To not allow automatic overwrite of keystore file.
       Regeneration of keystore may cause installation problems. -->
  <available file="keystore" property="keystore-exists" />

  <target name="-usage">
    <java classname="org.apache.tools.ant.Main">
      <arg value="-projecthelp" />
    </java>
  </target>

  <!--
    The air package needs to be signed.
    The keystore target generates a self-signed certificate and
    stores this in a file called _keystore_.
    Add the path to the keystore file to .gitignore to
    avoid exposing to outside.
    Clean does not remove the keystore file.
    ADVICE: don't regenerate the keystore after dong a test install,
            otherwise you will need to thoroughly clean your filesystem
            of the old air package, including emptying the trash, and 
            maybe reinstalling AIR.
  -->
  <target name="keystore" 
          unless="keystore-exists"
          description="Generate keystore with self-signed certificate.">
    <exec executable="${adt}"> 
      <arg value="-certificate"      />
      <arg line="-cn csusbdt"        />
      <arg line="-validityPeriod 5"  />
      <arg value="2048-RSA"          />
      <arg value="keystore"          />
      <arg value="1234"              />
    </exec> 
  </target>

  <target name="clean" description="Delete all derived files except keystore."> 
    <delete file="Main.swf"                     />
    <delete file="application.xml"              />
    <delete file="web/public/hello-air-osx.air" />
    <delete file="web/public/hello-air.dmg"     />
  </target>

  <!--
    The compile target generates Main.swf. 
    Configuration strings are passed in here.
  -->
  <target name="compile" description="Compile code under src folder into Main.swf."> 
    <exec executable="${mxmlc}" dir="src"> 
      <arg value="-define+=CONFIG::message,&quot;'${config.message}'&quot;" /> 
      <arg line="-o ../Main.swf" /> 
      <arg value="-library-path+=${air-sdk}/frameworks/libs/air/airglobal.swc" /> 
      <arg value="-library-path+=../lib/NativeApplicationUpdater-0.5.1.swc" /> 
<!--
      <arg value="-library-path+=${air-sdk}/frameworks/libs/air/applicationupdater_ui.swc" /> 
      <arg value="-library-path+=${air-sdk}/frameworks/libs/air/airglobal.swc" /> 
      <arg value="-library-path+=${air-sdk}/frameworks/libs/core.swc" /> 
      <arg value="-library-path+=${air-sdk}/frameworks/libs/air/aircore.swc" /> 
      <arg value="-library-path+=${air-sdk}/frameworks/libs/air/applicationupdater.swc" /> 
-->
      <arg value="Main.as" /> 
    </exec>  
  </target>

  <!-- Generate application.xml from app-template.xml and given properties. -->
  <target name="-app">
    <filter token="supportedProfiles" value="${supportedProfiles}" />
    <copy file="app-template.xml" tofile="application.xml" filtering="true" overwrite="true" />
  </target>

  <!-- Generate application.xml for osx. -->
  <target name="-app-osx">
    <antcall target="-app">
      <param name="supportedProfiles" value="desktop extendedDesktop" />
    </antcall>
  </target>

  <target name="test" 
          depends="compile, -app-osx" 
          description="Run the app directly."> 
    <exec executable="${adl}"> 
      <arg value="application.xml" />
    </exec>
  </target>

  <!-- Generate air package from Main.swf and given properties. -->
  <target name="-air" depends="compile">
    <exec executable="${adt}"> 
      <arg value="-package"            />
      <arg line="-storetype pkcs12"    />
      <arg line="-keystore keystore"   />
      <arg line="-storepass 1234"      />
      <arg line="-target air"          />
      <arg value="${package-name}"     />
      <arg value="application.xml"     />
      <arg value="Main.swf"            />
      <arg value="icons"               />
    </exec>
    <delete file="Main.swf"        />
    <delete file="application.xml" />
  </target>

  <!-- Generate hello-air-osx.air. -->
  <target name="-air-osx" depends="-app-osx">
    <antcall target="-air">
      <param name="package-name" value="hello-air-osx.air" />
    </antcall>
  </target>

  <!-- Generate the platform-specific air and installer files. -->
  <target name="-installer">
    <exec executable="${adt}"> 
      <arg value="-package"           />
      <arg line="-target native"      />
      <arg value="${installer-file}"  />
      <arg value="${air-file}"        />
    </exec> 
    <move file="${installer-file}" todir="web/public" />
    <move file="${air-file}"       todir="web/public" />
  </target>

  <target name="osx" 
          depends="-air-osx"
          description="Generate hello-air-osx.air and hello-air.dmg, and place in web/public.">
    <antcall target="-installer">
      <param name="air-file"        value="hello-air-osx.air" />
      <param name="installer-file"  value="hello-air.dmg"     />
    </antcall>
  </target>

  <target name="web" 
          description="Run web server on localhost."> 
    <exec executable="node" dir="web"> 
      <arg value="main.js" />
    </exec>
  </target>

  <target name="log-osx" 
          description="Display installation log messages; use to troubleshoot install problems."> 
    <exec executable="tail"> 
      <arg line="-f /private/var/log/system.log" />
    </exec>
  </target>

  <target name="doc" description="Generate documentation."> 
    <exec executable="aasdoc"> 
      <arg value="-define+=CONFIG::message,&quot;'${config.message}'&quot;" /> 
      <arg line="-doc-sources src" />
      <arg line="-output doc" />
      <arg value="-lenient" />
    </exec>
  </target> 

<!--
  <target name="copy-resources" depends="init"> 
    <copy file="application.xml" todir="${tempdir}" />
    <copy todir="${tempdir}">
      <fileset dir="." includes="icons/**" />
    </copy>
  </target> 
-->

</project>

